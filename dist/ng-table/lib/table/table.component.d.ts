import { OnInit, ApplicationRef, ElementRef, EventEmitter, OnChanges, SimpleChanges, ChangeDetectorRef, OnDestroy } from "@angular/core";
import { TableActionButtonTemplate, TableColumnTemplate, TableHeaderTemplate, TableHeaderControlTemplate, TableFooterTemplate, TableRowTotalTemplate, TableRowExpandTemplate } from "../directive/table-directive.directive";
import { TableSetting, PagingSetting, TableProps } from "../models/settings.model";
import { Observable, Subject } from "rxjs";
import { HttpClient } from "@angular/common/http";
import { SortState } from "../models/sort-order.model";
export declare class NgTableComponent implements OnInit, OnChanges, OnDestroy {
    private _appRef;
    private _httpClient;
    private _cdr;
    actBtnTemplate: TableActionButtonTemplate;
    headerControlTemplate: TableHeaderControlTemplate;
    headerTemplate: TableHeaderTemplate;
    footerTemplate: TableFooterTemplate;
    rowTotalTemplate: TableRowTotalTemplate;
    rowExpandTemplate: TableRowExpandTemplate;
    colTemplates: {
        [key: string]: TableColumnTemplate;
    };
    columnTriggerExpand$: Subject<{}>;
    setColumnTemplates: Array<TableColumnTemplate>;
    tbodyElement: ElementRef<HTMLElement>;
    settings: TableSetting<any>;
    totalCount: number;
    dataSource: any[];
    url: string;
    isLoading: boolean;
    filterModel$: Observable<any>;
    dataPropName: string;
    method: string;
    sortState$: Observable<SortState>;
    pagingOptionChange: EventEmitter<PagingSetting>;
    sortStateChange: EventEmitter<SortState>;
    pagingOptions: PagingSetting;
    props: TableProps;
    filterModel: any;
    sortState: SortState;
    private _unsubscribe$;
    constructor(_appRef: ApplicationRef, _httpClient: HttpClient, _cdr: ChangeDetectorRef);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    registerObserver(): void;
    shouldFetchData(): string;
    fetchData(): void;
    initSettings(): void;
    initInternalProps(): void;
    validateInitConfiguration(): void;
    handleOrderStateChange(sortState: SortState): void;
    onPagingOptionChange(pagingOptions: PagingSetting): void;
    resetOrderState(): void;
    resetPagingOption(): void;
    handleColumnTriggerExpand(eleObj: any): void;
    ngOnDestroy(): void;
}
